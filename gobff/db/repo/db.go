// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package repo

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.completeServerRegistrationStmt, err = db.PrepareContext(ctx, completeServerRegistration); err != nil {
		return nil, fmt.Errorf("error preparing query CompleteServerRegistration: %w", err)
	}
	if q.createHttpUrlConfigStmt, err = db.PrepareContext(ctx, createHttpUrlConfig); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHttpUrlConfig: %w", err)
	}
	if q.createServerStmt, err = db.PrepareContext(ctx, createServer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateServer: %w", err)
	}
	if q.createServerGroupStmt, err = db.PrepareContext(ctx, createServerGroup); err != nil {
		return nil, fmt.Errorf("error preparing query CreateServerGroup: %w", err)
	}
	if q.createServerPortStmt, err = db.PrepareContext(ctx, createServerPort); err != nil {
		return nil, fmt.Errorf("error preparing query CreateServerPort: %w", err)
	}
	if q.deleteServerGroupStmt, err = db.PrepareContext(ctx, deleteServerGroup); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteServerGroup: %w", err)
	}
	if q.getHttpUrlConfigByIdStmt, err = db.PrepareContext(ctx, getHttpUrlConfigById); err != nil {
		return nil, fmt.Errorf("error preparing query GetHttpUrlConfigById: %w", err)
	}
	if q.getOneTimeTokenForServerRegistrationStmt, err = db.PrepareContext(ctx, getOneTimeTokenForServerRegistration); err != nil {
		return nil, fmt.Errorf("error preparing query GetOneTimeTokenForServerRegistration: %w", err)
	}
	if q.getServerByGidSidStmt, err = db.PrepareContext(ctx, getServerByGidSid); err != nil {
		return nil, fmt.Errorf("error preparing query GetServerByGidSid: %w", err)
	}
	if q.getServerGroupStmt, err = db.PrepareContext(ctx, getServerGroup); err != nil {
		return nil, fmt.Errorf("error preparing query GetServerGroup: %w", err)
	}
	if q.getServerPortStmt, err = db.PrepareContext(ctx, getServerPort); err != nil {
		return nil, fmt.Errorf("error preparing query GetServerPort: %w", err)
	}
	if q.listHttpUrlConfigsStmt, err = db.PrepareContext(ctx, listHttpUrlConfigs); err != nil {
		return nil, fmt.Errorf("error preparing query ListHttpUrlConfigs: %w", err)
	}
	if q.listServerGroupsStmt, err = db.PrepareContext(ctx, listServerGroups); err != nil {
		return nil, fmt.Errorf("error preparing query ListServerGroups: %w", err)
	}
	if q.listServerPortsStmt, err = db.PrepareContext(ctx, listServerPorts); err != nil {
		return nil, fmt.Errorf("error preparing query ListServerPorts: %w", err)
	}
	if q.listServersByGroupStmt, err = db.PrepareContext(ctx, listServersByGroup); err != nil {
		return nil, fmt.Errorf("error preparing query ListServersByGroup: %w", err)
	}
	if q.updateOneTimeTokenForServerRegistrationStmt, err = db.PrepareContext(ctx, updateOneTimeTokenForServerRegistration); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOneTimeTokenForServerRegistration: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.completeServerRegistrationStmt != nil {
		if cerr := q.completeServerRegistrationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing completeServerRegistrationStmt: %w", cerr)
		}
	}
	if q.createHttpUrlConfigStmt != nil {
		if cerr := q.createHttpUrlConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHttpUrlConfigStmt: %w", cerr)
		}
	}
	if q.createServerStmt != nil {
		if cerr := q.createServerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createServerStmt: %w", cerr)
		}
	}
	if q.createServerGroupStmt != nil {
		if cerr := q.createServerGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createServerGroupStmt: %w", cerr)
		}
	}
	if q.createServerPortStmt != nil {
		if cerr := q.createServerPortStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createServerPortStmt: %w", cerr)
		}
	}
	if q.deleteServerGroupStmt != nil {
		if cerr := q.deleteServerGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteServerGroupStmt: %w", cerr)
		}
	}
	if q.getHttpUrlConfigByIdStmt != nil {
		if cerr := q.getHttpUrlConfigByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHttpUrlConfigByIdStmt: %w", cerr)
		}
	}
	if q.getOneTimeTokenForServerRegistrationStmt != nil {
		if cerr := q.getOneTimeTokenForServerRegistrationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOneTimeTokenForServerRegistrationStmt: %w", cerr)
		}
	}
	if q.getServerByGidSidStmt != nil {
		if cerr := q.getServerByGidSidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getServerByGidSidStmt: %w", cerr)
		}
	}
	if q.getServerGroupStmt != nil {
		if cerr := q.getServerGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getServerGroupStmt: %w", cerr)
		}
	}
	if q.getServerPortStmt != nil {
		if cerr := q.getServerPortStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getServerPortStmt: %w", cerr)
		}
	}
	if q.listHttpUrlConfigsStmt != nil {
		if cerr := q.listHttpUrlConfigsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHttpUrlConfigsStmt: %w", cerr)
		}
	}
	if q.listServerGroupsStmt != nil {
		if cerr := q.listServerGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listServerGroupsStmt: %w", cerr)
		}
	}
	if q.listServerPortsStmt != nil {
		if cerr := q.listServerPortsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listServerPortsStmt: %w", cerr)
		}
	}
	if q.listServersByGroupStmt != nil {
		if cerr := q.listServersByGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listServersByGroupStmt: %w", cerr)
		}
	}
	if q.updateOneTimeTokenForServerRegistrationStmt != nil {
		if cerr := q.updateOneTimeTokenForServerRegistrationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOneTimeTokenForServerRegistrationStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                          DBTX
	tx                                          *sql.Tx
	completeServerRegistrationStmt              *sql.Stmt
	createHttpUrlConfigStmt                     *sql.Stmt
	createServerStmt                            *sql.Stmt
	createServerGroupStmt                       *sql.Stmt
	createServerPortStmt                        *sql.Stmt
	deleteServerGroupStmt                       *sql.Stmt
	getHttpUrlConfigByIdStmt                    *sql.Stmt
	getOneTimeTokenForServerRegistrationStmt    *sql.Stmt
	getServerByGidSidStmt                       *sql.Stmt
	getServerGroupStmt                          *sql.Stmt
	getServerPortStmt                           *sql.Stmt
	listHttpUrlConfigsStmt                      *sql.Stmt
	listServerGroupsStmt                        *sql.Stmt
	listServerPortsStmt                         *sql.Stmt
	listServersByGroupStmt                      *sql.Stmt
	updateOneTimeTokenForServerRegistrationStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                       tx,
		tx:                                       tx,
		completeServerRegistrationStmt:           q.completeServerRegistrationStmt,
		createHttpUrlConfigStmt:                  q.createHttpUrlConfigStmt,
		createServerStmt:                         q.createServerStmt,
		createServerGroupStmt:                    q.createServerGroupStmt,
		createServerPortStmt:                     q.createServerPortStmt,
		deleteServerGroupStmt:                    q.deleteServerGroupStmt,
		getHttpUrlConfigByIdStmt:                 q.getHttpUrlConfigByIdStmt,
		getOneTimeTokenForServerRegistrationStmt: q.getOneTimeTokenForServerRegistrationStmt,
		getServerByGidSidStmt:                    q.getServerByGidSidStmt,
		getServerGroupStmt:                       q.getServerGroupStmt,
		getServerPortStmt:                        q.getServerPortStmt,
		listHttpUrlConfigsStmt:                   q.listHttpUrlConfigsStmt,
		listServerGroupsStmt:                     q.listServerGroupsStmt,
		listServerPortsStmt:                      q.listServerPortsStmt,
		listServersByGroupStmt:                   q.listServersByGroupStmt,
		updateOneTimeTokenForServerRegistrationStmt: q.updateOneTimeTokenForServerRegistrationStmt,
	}
}
