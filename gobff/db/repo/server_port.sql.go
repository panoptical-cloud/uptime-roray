// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: server_port.sql

package repo

import (
	"context"
)

const completeServerRegistration = `-- name: CompleteServerRegistration :exec
UPDATE servers SET reg_status = 'ACTIVE', agent_version = ?, mac = ? WHERE id = ?
`

type CompleteServerRegistrationParams struct {
	AgentVersion *string `json:"agent_version"`
	Mac          *string `json:"mac"`
	ID           string  `json:"id"`
}

func (q *Queries) CompleteServerRegistration(ctx context.Context, arg CompleteServerRegistrationParams) error {
	_, err := q.exec(ctx, q.completeServerRegistrationStmt, completeServerRegistration, arg.AgentVersion, arg.Mac, arg.ID)
	return err
}

const createServer = `-- name: CreateServer :one
INSERT INTO servers 
    (id, name, ip, group_id, reg_status)
VALUES
    (?, ?, ?, ?, 'NEW')
RETURNING id
`

type CreateServerParams struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Ip      string `json:"ip"`
	GroupID int64  `json:"group_id"`
}

func (q *Queries) CreateServer(ctx context.Context, arg CreateServerParams) (string, error) {
	row := q.queryRow(ctx, q.createServerStmt, createServer,
		arg.ID,
		arg.Name,
		arg.Ip,
		arg.GroupID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const createServerGroup = `-- name: CreateServerGroup :one
INSERT INTO server_groups 
    (name, desc)
VALUES
    (?, ?)
RETURNING id, name, "desc"
`

type CreateServerGroupParams struct {
	Name string `json:"name"`
	Desc string `json:"desc"`
}

func (q *Queries) CreateServerGroup(ctx context.Context, arg CreateServerGroupParams) (ServerGroup, error) {
	row := q.queryRow(ctx, q.createServerGroupStmt, createServerGroup, arg.Name, arg.Desc)
	var i ServerGroup
	err := row.Scan(&i.ID, &i.Name, &i.Desc)
	return i, err
}

const createServerPort = `-- name: CreateServerPort :one
INSERT INTO server_ports 
    (server_id, port)
VALUES
    (?, ?)
RETURNING server_id, port
`

type CreateServerPortParams struct {
	ServerID string `json:"server_id"`
	Port     int64  `json:"port"`
}

func (q *Queries) CreateServerPort(ctx context.Context, arg CreateServerPortParams) (ServerPort, error) {
	row := q.queryRow(ctx, q.createServerPortStmt, createServerPort, arg.ServerID, arg.Port)
	var i ServerPort
	err := row.Scan(&i.ServerID, &i.Port)
	return i, err
}

const deleteServerGroup = `-- name: DeleteServerGroup :exec
DELETE FROM server_groups WHERE name = ?
`

func (q *Queries) DeleteServerGroup(ctx context.Context, name string) error {
	_, err := q.exec(ctx, q.deleteServerGroupStmt, deleteServerGroup, name)
	return err
}

const getOneTimeTokenForServerRegistration = `-- name: GetOneTimeTokenForServerRegistration :one
SELECT one_time_token FROM servers WHERE id = ?
`

func (q *Queries) GetOneTimeTokenForServerRegistration(ctx context.Context, id string) (*string, error) {
	row := q.queryRow(ctx, q.getOneTimeTokenForServerRegistrationStmt, getOneTimeTokenForServerRegistration, id)
	var one_time_token *string
	err := row.Scan(&one_time_token)
	return one_time_token, err
}

const getServerByGidSid = `-- name: GetServerByGidSid :one
SELECT id, group_id, ip, mac, reg_status, one_time_token, one_time_token_expiry, name, "desc", fqdn, agent_version, os, arch, nats_subject, monit_enabled, notifs_enabled FROM servers WHERE group_id = ? AND id = ?
`

type GetServerByGidSidParams struct {
	GroupID int64  `json:"group_id"`
	ID      string `json:"id"`
}

func (q *Queries) GetServerByGidSid(ctx context.Context, arg GetServerByGidSidParams) (Server, error) {
	row := q.queryRow(ctx, q.getServerByGidSidStmt, getServerByGidSid, arg.GroupID, arg.ID)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.Ip,
		&i.Mac,
		&i.RegStatus,
		&i.OneTimeToken,
		&i.OneTimeTokenExpiry,
		&i.Name,
		&i.Desc,
		&i.Fqdn,
		&i.AgentVersion,
		&i.Os,
		&i.Arch,
		&i.NatsSubject,
		&i.MonitEnabled,
		&i.NotifsEnabled,
	)
	return i, err
}

const getServerGroup = `-- name: GetServerGroup :one
SELECT id, name, desc FROM server_groups WHERE id = ?
`

func (q *Queries) GetServerGroup(ctx context.Context, id int64) (ServerGroup, error) {
	row := q.queryRow(ctx, q.getServerGroupStmt, getServerGroup, id)
	var i ServerGroup
	err := row.Scan(&i.ID, &i.Name, &i.Desc)
	return i, err
}

const getServerPort = `-- name: GetServerPort :one
SELECT server_id, port FROM server_ports WHERE server_id = ? AND port = ?
`

type GetServerPortParams struct {
	ServerID string `json:"server_id"`
	Port     int64  `json:"port"`
}

func (q *Queries) GetServerPort(ctx context.Context, arg GetServerPortParams) (ServerPort, error) {
	row := q.queryRow(ctx, q.getServerPortStmt, getServerPort, arg.ServerID, arg.Port)
	var i ServerPort
	err := row.Scan(&i.ServerID, &i.Port)
	return i, err
}

const listServerGroups = `-- name: ListServerGroups :many
SELECT id, name, desc FROM server_groups
`

func (q *Queries) ListServerGroups(ctx context.Context) ([]ServerGroup, error) {
	rows, err := q.query(ctx, q.listServerGroupsStmt, listServerGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ServerGroup{}
	for rows.Next() {
		var i ServerGroup
		if err := rows.Scan(&i.ID, &i.Name, &i.Desc); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServerPorts = `-- name: ListServerPorts :many
SELECT server_id, port FROM server_ports
`

func (q *Queries) ListServerPorts(ctx context.Context) ([]ServerPort, error) {
	rows, err := q.query(ctx, q.listServerPortsStmt, listServerPorts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ServerPort{}
	for rows.Next() {
		var i ServerPort
		if err := rows.Scan(&i.ServerID, &i.Port); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServersByGroup = `-- name: ListServersByGroup :many
SELECT id, group_id, ip, mac, reg_status, one_time_token, one_time_token_expiry, name, "desc", fqdn, agent_version, os, arch, nats_subject, monit_enabled, notifs_enabled FROM servers WHERE group_id = ?
`

func (q *Queries) ListServersByGroup(ctx context.Context, groupID int64) ([]Server, error) {
	rows, err := q.query(ctx, q.listServersByGroupStmt, listServersByGroup, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Server{}
	for rows.Next() {
		var i Server
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.Ip,
			&i.Mac,
			&i.RegStatus,
			&i.OneTimeToken,
			&i.OneTimeTokenExpiry,
			&i.Name,
			&i.Desc,
			&i.Fqdn,
			&i.AgentVersion,
			&i.Os,
			&i.Arch,
			&i.NatsSubject,
			&i.MonitEnabled,
			&i.NotifsEnabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOneTimeTokenForServerRegistration = `-- name: UpdateOneTimeTokenForServerRegistration :exec
UPDATE servers SET one_time_token = ?, reg_status = 'PENDING' WHERE id = ?
`

type UpdateOneTimeTokenForServerRegistrationParams struct {
	OneTimeToken *string `json:"one_time_token"`
	ID           string  `json:"id"`
}

func (q *Queries) UpdateOneTimeTokenForServerRegistration(ctx context.Context, arg UpdateOneTimeTokenForServerRegistrationParams) error {
	_, err := q.exec(ctx, q.updateOneTimeTokenForServerRegistrationStmt, updateOneTimeTokenForServerRegistration, arg.OneTimeToken, arg.ID)
	return err
}
