/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as TestsIndexImport } from './routes/tests/index'
import { Route as ServersIndexImport } from './routes/servers/index'
import { Route as ServerPortIndexImport } from './routes/server-port/index'
import { Route as ServersOverviewImport } from './routes/servers/overview'
import { Route as ServersIncidentsImport } from './routes/servers/incidents'
import { Route as ServerPortStatusImport } from './routes/server-port/status'
import { Route as ServerPortFormImport } from './routes/server-port/form'
import { Route as ServersManageIndexImport } from './routes/servers/manage/index'
import { Route as ConfigNatsIndexImport } from './routes/config/nats/index'
import { Route as ServersManageColumnsImport } from './routes/servers/manage/columns'
import { Route as ServersGroupAddImport } from './routes/servers/group/add'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TestsIndexRoute = TestsIndexImport.update({
  id: '/tests/',
  path: '/tests/',
  getParentRoute: () => rootRoute,
} as any)

const ServersIndexRoute = ServersIndexImport.update({
  id: '/servers/',
  path: '/servers/',
  getParentRoute: () => rootRoute,
} as any)

const ServerPortIndexRoute = ServerPortIndexImport.update({
  id: '/server-port/',
  path: '/server-port/',
  getParentRoute: () => rootRoute,
} as any)

const ServersOverviewRoute = ServersOverviewImport.update({
  id: '/servers/overview',
  path: '/servers/overview',
  getParentRoute: () => rootRoute,
} as any)

const ServersIncidentsRoute = ServersIncidentsImport.update({
  id: '/servers/incidents',
  path: '/servers/incidents',
  getParentRoute: () => rootRoute,
} as any)

const ServerPortStatusRoute = ServerPortStatusImport.update({
  id: '/server-port/status',
  path: '/server-port/status',
  getParentRoute: () => rootRoute,
} as any)

const ServerPortFormRoute = ServerPortFormImport.update({
  id: '/server-port/form',
  path: '/server-port/form',
  getParentRoute: () => rootRoute,
} as any)

const ServersManageIndexRoute = ServersManageIndexImport.update({
  id: '/servers/manage/',
  path: '/servers/manage/',
  getParentRoute: () => rootRoute,
} as any)

const ConfigNatsIndexRoute = ConfigNatsIndexImport.update({
  id: '/config/nats/',
  path: '/config/nats/',
  getParentRoute: () => rootRoute,
} as any)

const ServersManageColumnsRoute = ServersManageColumnsImport.update({
  id: '/servers/manage/columns',
  path: '/servers/manage/columns',
  getParentRoute: () => rootRoute,
} as any)

const ServersGroupAddRoute = ServersGroupAddImport.update({
  id: '/servers/group/add',
  path: '/servers/group/add',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/server-port/form': {
      id: '/server-port/form'
      path: '/server-port/form'
      fullPath: '/server-port/form'
      preLoaderRoute: typeof ServerPortFormImport
      parentRoute: typeof rootRoute
    }
    '/server-port/status': {
      id: '/server-port/status'
      path: '/server-port/status'
      fullPath: '/server-port/status'
      preLoaderRoute: typeof ServerPortStatusImport
      parentRoute: typeof rootRoute
    }
    '/servers/incidents': {
      id: '/servers/incidents'
      path: '/servers/incidents'
      fullPath: '/servers/incidents'
      preLoaderRoute: typeof ServersIncidentsImport
      parentRoute: typeof rootRoute
    }
    '/servers/overview': {
      id: '/servers/overview'
      path: '/servers/overview'
      fullPath: '/servers/overview'
      preLoaderRoute: typeof ServersOverviewImport
      parentRoute: typeof rootRoute
    }
    '/server-port/': {
      id: '/server-port/'
      path: '/server-port'
      fullPath: '/server-port'
      preLoaderRoute: typeof ServerPortIndexImport
      parentRoute: typeof rootRoute
    }
    '/servers/': {
      id: '/servers/'
      path: '/servers'
      fullPath: '/servers'
      preLoaderRoute: typeof ServersIndexImport
      parentRoute: typeof rootRoute
    }
    '/tests/': {
      id: '/tests/'
      path: '/tests'
      fullPath: '/tests'
      preLoaderRoute: typeof TestsIndexImport
      parentRoute: typeof rootRoute
    }
    '/servers/group/add': {
      id: '/servers/group/add'
      path: '/servers/group/add'
      fullPath: '/servers/group/add'
      preLoaderRoute: typeof ServersGroupAddImport
      parentRoute: typeof rootRoute
    }
    '/servers/manage/columns': {
      id: '/servers/manage/columns'
      path: '/servers/manage/columns'
      fullPath: '/servers/manage/columns'
      preLoaderRoute: typeof ServersManageColumnsImport
      parentRoute: typeof rootRoute
    }
    '/config/nats/': {
      id: '/config/nats/'
      path: '/config/nats'
      fullPath: '/config/nats'
      preLoaderRoute: typeof ConfigNatsIndexImport
      parentRoute: typeof rootRoute
    }
    '/servers/manage/': {
      id: '/servers/manage/'
      path: '/servers/manage'
      fullPath: '/servers/manage'
      preLoaderRoute: typeof ServersManageIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/server-port/form': typeof ServerPortFormRoute
  '/server-port/status': typeof ServerPortStatusRoute
  '/servers/incidents': typeof ServersIncidentsRoute
  '/servers/overview': typeof ServersOverviewRoute
  '/server-port': typeof ServerPortIndexRoute
  '/servers': typeof ServersIndexRoute
  '/tests': typeof TestsIndexRoute
  '/servers/group/add': typeof ServersGroupAddRoute
  '/servers/manage/columns': typeof ServersManageColumnsRoute
  '/config/nats': typeof ConfigNatsIndexRoute
  '/servers/manage': typeof ServersManageIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/server-port/form': typeof ServerPortFormRoute
  '/server-port/status': typeof ServerPortStatusRoute
  '/servers/incidents': typeof ServersIncidentsRoute
  '/servers/overview': typeof ServersOverviewRoute
  '/server-port': typeof ServerPortIndexRoute
  '/servers': typeof ServersIndexRoute
  '/tests': typeof TestsIndexRoute
  '/servers/group/add': typeof ServersGroupAddRoute
  '/servers/manage/columns': typeof ServersManageColumnsRoute
  '/config/nats': typeof ConfigNatsIndexRoute
  '/servers/manage': typeof ServersManageIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/server-port/form': typeof ServerPortFormRoute
  '/server-port/status': typeof ServerPortStatusRoute
  '/servers/incidents': typeof ServersIncidentsRoute
  '/servers/overview': typeof ServersOverviewRoute
  '/server-port/': typeof ServerPortIndexRoute
  '/servers/': typeof ServersIndexRoute
  '/tests/': typeof TestsIndexRoute
  '/servers/group/add': typeof ServersGroupAddRoute
  '/servers/manage/columns': typeof ServersManageColumnsRoute
  '/config/nats/': typeof ConfigNatsIndexRoute
  '/servers/manage/': typeof ServersManageIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/server-port/form'
    | '/server-port/status'
    | '/servers/incidents'
    | '/servers/overview'
    | '/server-port'
    | '/servers'
    | '/tests'
    | '/servers/group/add'
    | '/servers/manage/columns'
    | '/config/nats'
    | '/servers/manage'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/server-port/form'
    | '/server-port/status'
    | '/servers/incidents'
    | '/servers/overview'
    | '/server-port'
    | '/servers'
    | '/tests'
    | '/servers/group/add'
    | '/servers/manage/columns'
    | '/config/nats'
    | '/servers/manage'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/server-port/form'
    | '/server-port/status'
    | '/servers/incidents'
    | '/servers/overview'
    | '/server-port/'
    | '/servers/'
    | '/tests/'
    | '/servers/group/add'
    | '/servers/manage/columns'
    | '/config/nats/'
    | '/servers/manage/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ServerPortFormRoute: typeof ServerPortFormRoute
  ServerPortStatusRoute: typeof ServerPortStatusRoute
  ServersIncidentsRoute: typeof ServersIncidentsRoute
  ServersOverviewRoute: typeof ServersOverviewRoute
  ServerPortIndexRoute: typeof ServerPortIndexRoute
  ServersIndexRoute: typeof ServersIndexRoute
  TestsIndexRoute: typeof TestsIndexRoute
  ServersGroupAddRoute: typeof ServersGroupAddRoute
  ServersManageColumnsRoute: typeof ServersManageColumnsRoute
  ConfigNatsIndexRoute: typeof ConfigNatsIndexRoute
  ServersManageIndexRoute: typeof ServersManageIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ServerPortFormRoute: ServerPortFormRoute,
  ServerPortStatusRoute: ServerPortStatusRoute,
  ServersIncidentsRoute: ServersIncidentsRoute,
  ServersOverviewRoute: ServersOverviewRoute,
  ServerPortIndexRoute: ServerPortIndexRoute,
  ServersIndexRoute: ServersIndexRoute,
  TestsIndexRoute: TestsIndexRoute,
  ServersGroupAddRoute: ServersGroupAddRoute,
  ServersManageColumnsRoute: ServersManageColumnsRoute,
  ConfigNatsIndexRoute: ConfigNatsIndexRoute,
  ServersManageIndexRoute: ServersManageIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/server-port/form",
        "/server-port/status",
        "/servers/incidents",
        "/servers/overview",
        "/server-port/",
        "/servers/",
        "/tests/",
        "/servers/group/add",
        "/servers/manage/columns",
        "/config/nats/",
        "/servers/manage/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/server-port/form": {
      "filePath": "server-port/form.tsx"
    },
    "/server-port/status": {
      "filePath": "server-port/status.tsx"
    },
    "/servers/incidents": {
      "filePath": "servers/incidents.tsx"
    },
    "/servers/overview": {
      "filePath": "servers/overview.tsx"
    },
    "/server-port/": {
      "filePath": "server-port/index.tsx"
    },
    "/servers/": {
      "filePath": "servers/index.tsx"
    },
    "/tests/": {
      "filePath": "tests/index.tsx"
    },
    "/servers/group/add": {
      "filePath": "servers/group/add.tsx"
    },
    "/servers/manage/columns": {
      "filePath": "servers/manage/columns.tsx"
    },
    "/config/nats/": {
      "filePath": "config/nats/index.tsx"
    },
    "/servers/manage/": {
      "filePath": "servers/manage/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
